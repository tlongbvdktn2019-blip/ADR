/**
 * Telegram Notification Service
 * G·ª≠i th√¥ng b√°o ADR qua Telegram Bot
 * 
 * Setup:
 * 1. T·∫°o bot: https://t.me/BotFather
 * 2. L·∫•y Bot Token
 * 3. L·∫•y Chat ID (g·ª≠i tin nh·∫Øn cho bot, v√†o https://api.telegram.org/bot<TOKEN>/getUpdates)
 * 4. Th√™m v√†o .env.local:
 *    TELEGRAM_BOT_TOKEN=your-bot-token
 *    TELEGRAM_CHAT_ID=your-chat-id
 */

import { ADRReport } from '@/types/report'

interface TelegramConfig {
  botToken: string
  chatId: string
}

/**
 * Get Telegram configuration from environment variables
 */
function getTelegramConfig(): TelegramConfig | null {
  const botToken = process.env.TELEGRAM_BOT_TOKEN
  const chatId = process.env.TELEGRAM_CHAT_ID

  if (!botToken || !chatId) {
    console.warn('Telegram notification disabled: Missing TELEGRAM_BOT_TOKEN or TELEGRAM_CHAT_ID')
    return null
  }

  return { botToken, chatId }
}

/**
 * Format ADR report as Telegram message
 */
function formatTelegramMessage(report: ADRReport): string {
  const severityEmoji = {
    death: '‚ò†Ô∏è',
    life_threatening: 'üö®',
    hospitalization: 'üè•',
    birth_defect: 'üë∂',
    permanent_disability: '‚ôø',
    not_serious: '‚úÖ'
  }

  const emoji = severityEmoji[report.severity_level] || 'üìã'

  return `
üîî <b>C√≥ b√°o c√°o ADR m·ªõi!</b>

${emoji} <b>M√£ b√°o c√°o:</b> ${report.report_code}
üë§ <b>B·ªánh nh√¢n:</b> ${report.patient_name}
üè• <b>T·ªï ch·ª©c:</b> ${report.organization}
‚ö†Ô∏è <b>M·ª©c ƒë·ªô:</b> ${getSeverityLabel(report.severity_level)}
üìÖ <b>Ng√†y x·∫£y ra:</b> ${formatDate(report.adr_occurrence_date)}

üíä <b>Thu·ªëc nghi ng·ªù:</b>
${report.suspected_drugs?.map((drug, i) => `  ${i + 1}. ${drug.drug_name}`).join('\n') || 'Kh√¥ng c√≥'}

üìù <b>M√¥ t·∫£:</b> ${truncate(report.adr_description, 100)}

üë®‚Äç‚öïÔ∏è <b>Ng∆∞·ªùi b√°o c√°o:</b> ${report.reporter_name} (${report.reporter_profession})
üìû <b>Li√™n h·ªá:</b> ${report.reporter_phone || report.reporter_email || 'Kh√¥ng c√≥'}

‚è∞ <b>Th·ªùi gian:</b> ${new Date().toLocaleString('vi-VN')}
  `.trim()
}

/**
 * Send Telegram notification
 */
export async function sendTelegramNotification(
  report: ADRReport
): Promise<{ success: boolean; error?: string }> {
  const config = getTelegramConfig()

  if (!config) {
    return {
      success: false,
      error: 'Telegram not configured'
    }
  }

  try {
    const message = formatTelegramMessage(report)
    const url = `https://api.telegram.org/bot${config.botToken}/sendMessage`

    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        chat_id: config.chatId,
        text: message,
        parse_mode: 'HTML'
      })
    })

    const data = await response.json()

    if (!response.ok || !data.ok) {
      console.error('Telegram API error:', data)
      return {
        success: false,
        error: data.description || 'Telegram API error'
      }
    }

    console.log(`‚úÖ Telegram notification sent for report ${report.report_code}`)
    return { success: true }

  } catch (error) {
    console.error('Telegram notification error:', error)
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error'
    }
  }
}

/**
 * Test Telegram configuration
 */
export async function testTelegramConnection(): Promise<boolean> {
  const config = getTelegramConfig()

  if (!config) {
    console.error('Telegram not configured')
    return false
  }

  try {
    const url = `https://api.telegram.org/bot${config.botToken}/getMe`
    const response = await fetch(url)
    const data = await response.json()

    if (data.ok) {
      console.log('‚úÖ Telegram bot connected:', data.result.username)
      return true
    } else {
      console.error('‚ùå Telegram bot error:', data.description)
      return false
    }
  } catch (error) {
    console.error('‚ùå Telegram connection error:', error)
    return false
  }
}

// Helper functions
function getSeverityLabel(severity: string): string {
  const labels: Record<string, string> = {
    death: 'T·ª≠ vong',
    life_threatening: 'ƒêe d·ªça t√≠nh m·∫°ng',
    hospitalization: 'Nh·∫≠p vi·ªán',
    birth_defect: 'D·ªã t·∫≠t b·∫©m sinh',
    permanent_disability: 'T√†n t·∫≠t vƒ©nh vi·ªÖn',
    not_serious: 'Kh√¥ng nghi√™m tr·ªçng'
  }
  return labels[severity] || severity
}

function formatDate(dateString: string): string {
  try {
    return new Date(dateString).toLocaleDateString('vi-VN')
  } catch {
    return dateString
  }
}

function truncate(text: string, maxLength: number): string {
  if (text.length <= maxLength) return text
  return text.substring(0, maxLength) + '...'
}







