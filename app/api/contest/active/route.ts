import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@/lib/supabase';

// GET: L·∫•y cu·ªôc thi ƒëang di·ªÖn ra
export async function GET(request: NextRequest) {
  try {
    const supabase = createClient();
    const now = new Date().toISOString();
    
    // L·∫•y t·∫•t c·∫£ cu·ªôc thi active v√† public, sau ƒë√≥ filter trong code
    const { data: contests, error } = await supabase
      .from('contests')
      .select('*')
      .eq('status', 'active')
      .eq('is_public', true)
      .order('created_at', { ascending: false });

    if (error) {
      console.error('Supabase query error:', error);
      throw error;
    }

    // Debug logging
    console.log('üîç DEBUG - Active contests found:', contests?.length || 0);
    if (contests && contests.length > 0) {
      contests.forEach((c: any) => {
        console.log(`üìã Contest: ${c.title}`, {
          status: c.status,
          is_public: c.is_public,
          start_date: c.start_date,
          end_date: c.end_date,
          now: now
        });
      });
    }

    // Filter cu·ªôc thi h·ª£p l·ªá (x·ª≠ l√Ω start_date v√† end_date null)
    const validContest = contests?.find((contest: any) => {
      // N·∫øu c√≥ start_date, ki·ªÉm tra ƒë√£ b·∫Øt ƒë·∫ßu ch∆∞a
      if (contest.start_date && contest.start_date > now) {
        console.log(`‚ùå Contest "${contest.title}" ch∆∞a b·∫Øt ƒë·∫ßu`);
        return false;
      }
      // N·∫øu c√≥ end_date, ki·ªÉm tra ƒë√£ k·∫øt th√∫c ch∆∞a
      if (contest.end_date && contest.end_date < now) {
        console.log(`‚ùå Contest "${contest.title}" ƒë√£ k·∫øt th√∫c. End: ${contest.end_date}, Now: ${now}`);
        return false;
      }
      console.log(`‚úÖ Contest "${contest.title}" h·ª£p l·ªá`);
      return true;
    });

    // Convert v·ªÅ single result
    const contest = validContest || null;

    // Debug response
    if (!contest && contests && contests.length > 0) {
      console.warn('‚ö†Ô∏è C√≥ cu·ªôc thi trong DB nh∆∞ng kh√¥ng h·ª£p l·ªá v·ªÅ th·ªùi gian');
    } else if (!contests || contests.length === 0) {
      console.warn('‚ö†Ô∏è Kh√¥ng c√≥ cu·ªôc thi active + public trong DB');
    }

    return NextResponse.json({
      success: true,
      data: contest,
      // Debug info (ch·ªâ ƒë·ªÉ dev, c√≥ th·ªÉ x√≥a sau)
      debug: process.env.NODE_ENV === 'development' ? {
        totalContests: contests?.length || 0,
        serverTime: now,
        hasValidContest: !!contest
      } : undefined
    });
  } catch (error: any) {
    console.error('Error fetching active contest:', error);
    return NextResponse.json(
      { success: false, error: error.message },
      { status: 500 }
    );
  }
}































