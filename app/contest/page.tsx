'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { Contest, Department, Unit } from '@/types/contest';

export default function ContestLandingPage() {
  const router = useRouter();
  const [contest, setContest] = useState<Contest | null>(null);
  const [departments, setDepartments] = useState<Department[]>([]);
  const [units, setUnits] = useState<Unit[]>([]);
  const [filteredUnits, setFilteredUnits] = useState<Unit[]>([]);
  const [loading, setLoading] = useState(true);
  const [submitting, setSubmitting] = useState(false);

  const [formData, setFormData] = useState({
    full_name: '',
    email: '',
    phone: '',
    department_id: '',
    unit_id: ''
  });

  const [errors, setErrors] = useState<Record<string, string>>({});

  useEffect(() => {
    loadData();
  }, []);

  useEffect(() => {
    if (formData.department_id) {
      const filtered = units.filter(u => u.department_id === formData.department_id);
      setFilteredUnits(filtered);
      setFormData(prev => ({ ...prev, unit_id: '' }));
    } else {
      setFilteredUnits([]);
    }
  }, [formData.department_id, units]);

  const loadData = async () => {
    try {
      setLoading(true);

      // L·∫•y cu·ªôc thi active
      const contestRes = await fetch('/api/contest/active');
      const contestData = await contestRes.json();

      if (!contestData.success || !contestData.data) {
        alert('Hi·ªán t·∫°i kh√¥ng c√≥ cu·ªôc thi n√†o ƒëang di·ªÖn ra');
        return;
      }

      setContest(contestData.data);

      // L·∫•y departments
      const deptRes = await fetch('/api/contest/departments');
      const deptData = await deptRes.json();
      if (deptData.success) {
        setDepartments(deptData.data || []);
      }

      // L·∫•y units
      const unitsRes = await fetch('/api/contest/units');
      const unitsData = await unitsRes.json();
      if (unitsData.success) {
        setUnits(unitsData.data || []);
      }
    } catch (error) {
      console.error('Error loading data:', error);
      alert('C√≥ l·ªói khi t·∫£i d·ªØ li·ªáu');
    } finally {
      setLoading(false);
    }
  };

  const validateForm = () => {
    const newErrors: Record<string, string> = {};

    if (!formData.full_name.trim()) {
      newErrors.full_name = 'Vui l√≤ng nh·∫≠p h·ªç v√† t√™n';
    }

    if (!formData.department_id) {
      newErrors.department_id = 'Vui l√≤ng ch·ªçn ƒë∆°n v·ªã';
    }

    if (!formData.unit_id) {
      newErrors.unit_id = 'Vui l√≤ng ch·ªçn khoa/ph√≤ng';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!validateForm()) return;
    if (!contest) return;

    try {
      setSubmitting(true);

      const response = await fetch('/api/contest/register', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          contest_id: contest.id,
          ...formData
        })
      });

      const data = await response.json();

      if (!data.success) {
        alert(data.error || 'C√≥ l·ªói x·∫£y ra');
        return;
      }

      // L∆∞u participant_id v√†o sessionStorage
      sessionStorage.setItem('contest_participant_id', data.data.id);
      sessionStorage.setItem('contest_id', contest.id);

      // Chuy·ªÉn ƒë·∫øn trang l√†m b√†i
      router.push('/contest/quiz');
    } catch (error) {
      console.error('Error registering:', error);
      alert('C√≥ l·ªói x·∫£y ra khi ƒëƒÉng k√Ω');
    } finally {
      setSubmitting(false);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100">
        <div className="text-center">
          <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">ƒêang t·∫£i...</p>
        </div>
      </div>
    );
  }

  if (!contest) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100">
        <div className="text-center bg-white p-8 rounded-xl shadow-lg">
          <h2 className="text-2xl font-bold text-gray-800 mb-4">
            Hi·ªán t·∫°i ch∆∞a c√≥ cu·ªôc thi n√†o ƒëang di·ªÖn ra
          </h2>
          <p className="text-gray-600">Vui l√≤ng quay l·∫°i sau!</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-4xl mx-auto">
        {/* Header */}
        <div className="text-center mb-12">
          <h1 className="text-5xl font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-indigo-600 mb-4">
            {contest.title || 'KI·∫æN TH·ª®C ADR'}
          </h1>
          {contest.description && (
            <p className="text-xl text-gray-700 mb-6">{contest.description}</p>
          )}
        </div>

        <div className="grid md:grid-cols-2 gap-8 mb-12">
          {/* Th√¥ng tin cu·ªôc thi */}
          <div className="bg-white rounded-2xl shadow-xl p-6 border-t-4 border-blue-500">
            <h2 className="text-2xl font-bold text-gray-800 mb-4 flex items-center">
              <span className="text-3xl mr-3">üìã</span>
              Th·ªÉ l·ªá cu·ªôc thi
            </h2>
            {contest.rules ? (
              <div className="prose text-gray-600" dangerouslySetInnerHTML={{ __html: contest.rules }} />
            ) : (
              <ul className="space-y-2 text-gray-600">
                <li className="flex items-start">
                  <span className="text-blue-500 mr-2">‚Ä¢</span>
                  S·ªë c√¢u h·ªèi: <strong>{contest.number_of_questions} c√¢u</strong>
                </li>
                <li className="flex items-start">
                  <span className="text-blue-500 mr-2">‚Ä¢</span>
                  Th·ªùi gian m·ªói c√¢u: <strong>{contest.time_per_question} gi√¢y</strong>
                </li>
                <li className="flex items-start">
                  <span className="text-blue-500 mr-2">‚Ä¢</span>
                  T·ªïng th·ªùi gian: <strong>{contest.number_of_questions * contest.time_per_question} gi√¢y</strong>
                </li>
                <li className="flex items-start">
                  <span className="text-blue-500 mr-2">‚Ä¢</span>
                  Tr·∫£ l·ªùi ƒë√∫ng c√†ng nhi·ªÅu, c√†ng nhanh th√¨ x·∫øp h·∫°ng c√†ng cao
                </li>
              </ul>
            )}
          </div>

          {/* Gi·∫£i th∆∞·ªüng */}
          <div className="bg-white rounded-2xl shadow-xl p-6 border-t-4 border-yellow-500">
            <h2 className="text-2xl font-bold text-gray-800 mb-4 flex items-center">
              <span className="text-3xl mr-3">üèÜ</span>
              Gi·∫£i th∆∞·ªüng
            </h2>
            {contest.prizes ? (
              <div className="prose text-gray-600" dangerouslySetInnerHTML={{ __html: contest.prizes }} />
            ) : (
              <div className="space-y-3 text-gray-600">
                <div className="flex items-center space-x-3">
                  <div className="w-12 h-12 bg-gradient-to-r from-yellow-400 to-yellow-600 rounded-full flex items-center justify-center text-white font-bold text-lg">1</div>
                  <span>Gi·∫£i Nh·∫•t: Ch·ª©ng nh·∫≠n + Ph·∫ßn th∆∞·ªüng</span>
                </div>
                <div className="flex items-center space-x-3">
                  <div className="w-12 h-12 bg-gradient-to-r from-gray-300 to-gray-500 rounded-full flex items-center justify-center text-white font-bold text-lg">2</div>
                  <span>Gi·∫£i Nh√¨: Ch·ª©ng nh·∫≠n + Ph·∫ßn th∆∞·ªüng</span>
                </div>
                <div className="flex items-center space-x-3">
                  <div className="w-12 h-12 bg-gradient-to-r from-orange-400 to-orange-600 rounded-full flex items-center justify-center text-white font-bold text-lg">3</div>
                  <span>Gi·∫£i Ba: Ch·ª©ng nh·∫≠n + Ph·∫ßn th∆∞·ªüng</span>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Form ƒëƒÉng k√Ω */}
        <div className="bg-white rounded-2xl shadow-2xl p-8">
          <h2 className="text-3xl font-bold text-center text-gray-800 mb-8">
            ƒêƒÉng k√Ω tham gia
          </h2>

          <form onSubmit={handleSubmit} className="space-y-6">
            {/* H·ªç v√† t√™n */}
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-2">
                H·ªç v√† T√™n <span className="text-red-500">*</span>
              </label>
              <input
                type="text"
                value={formData.full_name}
                onChange={(e) => setFormData({ ...formData, full_name: e.target.value })}
                className={`w-full px-4 py-3 border-2 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition ${
                  errors.full_name ? 'border-red-500' : 'border-gray-300'
                }`}
                placeholder="Nh·∫≠p h·ªç v√† t√™n c·ªßa b·∫°n"
              />
              {errors.full_name && (
                <p className="mt-1 text-sm text-red-500">{errors.full_name}</p>
              )}
            </div>

            {/* Email */}
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-2">
                Email (t√πy ch·ªçn)
              </label>
              <input
                type="email"
                value={formData.email}
                onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                className="w-full px-4 py-3 border-2 border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition"
                placeholder="example@email.com"
              />
            </div>

            {/* S·ªë ƒëi·ªán tho·∫°i */}
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-2">
                S·ªë ƒëi·ªán tho·∫°i (t√πy ch·ªçn)
              </label>
              <input
                type="tel"
                value={formData.phone}
                onChange={(e) => setFormData({ ...formData, phone: e.target.value })}
                className="w-full px-4 py-3 border-2 border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition"
                placeholder="0123456789"
              />
            </div>

            {/* ƒê∆°n v·ªã */}
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-2">
                ƒê∆°n v·ªã <span className="text-red-500">*</span>
              </label>
              <select
                value={formData.department_id}
                onChange={(e) => setFormData({ ...formData, department_id: e.target.value })}
                className={`w-full px-4 py-3 border-2 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition ${
                  errors.department_id ? 'border-red-500' : 'border-gray-300'
                }`}
              >
                <option value="">-- Ch·ªçn ƒë∆°n v·ªã --</option>
                {departments.map(dept => (
                  <option key={dept.id} value={dept.id}>{dept.name}</option>
                ))}
              </select>
              {errors.department_id && (
                <p className="mt-1 text-sm text-red-500">{errors.department_id}</p>
              )}
            </div>

            {/* Khoa/Ph√≤ng */}
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-2">
                Khoa/Ph√≤ng <span className="text-red-500">*</span>
              </label>
              <select
                value={formData.unit_id}
                onChange={(e) => setFormData({ ...formData, unit_id: e.target.value })}
                disabled={!formData.department_id}
                className={`w-full px-4 py-3 border-2 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition ${
                  errors.unit_id ? 'border-red-500' : 'border-gray-300'
                } ${!formData.department_id ? 'bg-gray-100 cursor-not-allowed' : ''}`}
              >
                <option value="">-- Ch·ªçn khoa/ph√≤ng --</option>
                {filteredUnits.map(unit => (
                  <option key={unit.id} value={unit.id}>{unit.name}</option>
                ))}
              </select>
              {errors.unit_id && (
                <p className="mt-1 text-sm text-red-500">{errors.unit_id}</p>
              )}
            </div>

            {/* N√∫t submit */}
            <button
              type="submit"
              disabled={submitting}
              className="w-full bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white font-bold py-4 px-8 rounded-lg text-xl shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 transition-all disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {submitting ? (
                <span className="flex items-center justify-center">
                  <svg className="animate-spin h-5 w-5 mr-3" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" fill="none" />
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" />
                  </svg>
                  ƒêang x·ª≠ l√Ω...
                </span>
              ) : (
                'üöÄ B·∫ÆT ƒê·∫¶U L√ÄM B√ÄI'
              )}
            </button>
          </form>
        </div>

        {/* Xem b·∫£ng x·∫øp h·∫°ng */}
        <div className="mt-8 text-center">
          <a
            href="/contest/leaderboard"
            className="inline-block bg-white hover:bg-gray-50 text-gray-800 font-semibold py-3 px-6 rounded-lg shadow-md hover:shadow-lg transition"
          >
            üìä Xem B·∫£ng X·∫øp H·∫°ng
          </a>
        </div>
      </div>
    </div>
  );
}































