#!/usr/bin/env python3
"""
CSV to SQL Converter cho ADR Training Quiz Questions
Chuy·ªÉn ƒë·ªïi file CSV ch·ª©a c√¢u h·ªèi th√†nh SQL INSERT statements

CSV Format:
category_key,question_text,question_type,difficulty,option_a,option_b,option_c,option_d,correct_answer,explanation,reference_source,learning_point_1,learning_point_2,learning_point_3,estimated_time,points

V√≠ d·ª•:
who_umc,"Theo WHO-UMC, m·ª©c ƒë·ªô n√†o y√™u c·∫ßu rechallenge positive?",multiple_choice,advanced,"Certain","Probable","Possible","Unlikely",A,"M·ª©c ƒë·ªô Certain y√™u c·∫ßu rechallenge positive...","WHO Guidelines","Certain c·∫ßn rechallenge","B·∫±ng ch·ª©ng m·∫°nh nh·∫•t","An to√†n b·ªánh nh√¢n quan tr·ªçng",120,20
"""

import csv
import json
import argparse
import sys
from pathlib import Path

def escape_sql_string(text):
    """Escape single quotes and other special characters for SQL"""
    if not text:
        return ""
    return text.replace("'", "''").replace("\\", "\\\\")

def create_options_json(option_a, option_b, option_c=None, option_d=None, question_type='multiple_choice'):
    """Create JSON options array based on question type"""
    
    if question_type == 'true_false':
        return [
            {"key": "true", "text": "ƒê√∫ng"},
            {"key": "false", "text": "Sai"}
        ]
    
    options = []
    if option_a:
        options.append({"key": "A", "text": option_a})
    if option_b:
        options.append({"key": "B", "text": option_b})
    if option_c:
        options.append({"key": "C", "text": option_c})
    if option_d:
        options.append({"key": "D", "text": option_d})
    
    return options

def create_learning_points_array(point1, point2=None, point3=None):
    """Create learning points array, filtering out empty values"""
    points = []
    if point1:
        points.append(point1)
    if point2:
        points.append(point2)
    if point3:
        points.append(point3)
    return points

def convert_csv_to_sql(csv_file_path, output_file_path):
    """Convert CSV file to SQL INSERT statements"""
    
    sql_template = """INSERT INTO quiz_questions (
    category_id,
    question_text,
    question_type,
    difficulty,
    options,
    correct_answer,
    explanation,
    reference_source,
    learning_points,
    estimated_time_seconds,
    points_value,
    is_active,
    review_status
) VALUES (
    (SELECT id FROM quiz_categories WHERE category_key = '{category_key}' LIMIT 1),
    '{question_text}',
    '{question_type}',
    '{difficulty}',
    '{options}'::jsonb,
    '{correct_answer}',
    '{explanation}',
    '{reference_source}',
    ARRAY{learning_points},
    {estimated_time_seconds},
    {points_value},
    true,
    'approved'
);

"""

    try:
        with open(csv_file_path, 'r', encoding='utf-8') as csvfile:
            reader = csv.DictReader(csvfile)
            
            sql_statements = []
            sql_statements.append("-- Generated SQL from CSV: " + str(csv_file_path))
            sql_statements.append("-- Auto-generated on: " + str(datetime.now()))
            sql_statements.append("")
            
            for row_num, row in enumerate(reader, start=2):
                try:
                    # Validate required fields
                    required_fields = ['category_key', 'question_text', 'question_type', 
                                     'difficulty', 'correct_answer', 'explanation']
                    
                    for field in required_fields:
                        if not row.get(field, '').strip():
                            print(f"Warning: Row {row_num} missing required field '{field}'")
                            continue
                    
                    # Create options JSON
                    options = create_options_json(
                        row.get('option_a', ''),
                        row.get('option_b', ''), 
                        row.get('option_c', ''),
                        row.get('option_d', ''),
                        row['question_type']
                    )
                    options_json = json.dumps(options, ensure_ascii=False)
                    
                    # Create learning points array
                    learning_points = create_learning_points_array(
                        row.get('learning_point_1', ''),
                        row.get('learning_point_2', ''),
                        row.get('learning_point_3', '')
                    )
                    
                    # Format learning points for SQL ARRAY
                    if learning_points:
                        learning_points_sql = "['" + "','".join([escape_sql_string(p) for p in learning_points]) + "']"
                    else:
                        learning_points_sql = "[]"
                    
                    # Get estimated time and points with defaults
                    estimated_time = int(row.get('estimated_time', 60))
                    points_value = int(row.get('points', 10))
                    
                    # Generate SQL statement
                    sql = sql_template.format(
                        category_key=row['category_key'],
                        question_text=escape_sql_string(row['question_text']),
                        question_type=row['question_type'],
                        difficulty=row['difficulty'],
                        options=options_json.replace("'", "''"),  # Escape quotes for JSON
                        correct_answer=row['correct_answer'],
                        explanation=escape_sql_string(row['explanation']),
                        reference_source=escape_sql_string(row.get('reference_source', '')),
                        learning_points=learning_points_sql,
                        estimated_time_seconds=estimated_time,
                        points_value=points_value
                    )
                    
                    sql_statements.append(sql)
                    
                except Exception as e:
                    print(f"Error processing row {row_num}: {e}")
                    continue
            
            # Add update statement for category counts
            sql_statements.append("""
-- Update category question counts
UPDATE quiz_categories SET total_questions = (
    SELECT COUNT(*) 
    FROM quiz_questions 
    WHERE quiz_questions.category_id = quiz_categories.id 
    AND is_active = true
    AND review_status = 'approved'
);

-- Display import results
SELECT 
    c.name as category_name,
    COUNT(q.id) as question_count
FROM quiz_categories c
LEFT JOIN quiz_questions q ON c.id = q.category_id 
    AND q.is_active = true 
    AND q.review_status = 'approved'
WHERE c.is_active = true
GROUP BY c.id, c.name
ORDER BY c.name;
""")
            
            # Write to output file
            with open(output_file_path, 'w', encoding='utf-8') as outfile:
                outfile.write('\n'.join(sql_statements))
            
            print(f"‚úÖ Successfully converted {len(sql_statements)-3} questions from CSV to SQL")
            print(f"üìÑ Output file: {output_file_path}")
            
    except FileNotFoundError:
        print(f"‚ùå CSV file not found: {csv_file_path}")
        return False
    except Exception as e:
        print(f"‚ùå Error converting CSV: {e}")
        return False
    
    return True

def create_sample_csv(output_path):
    """Create a sample CSV file for reference"""
    sample_data = [
        {
            'category_key': 'who_umc',
            'question_text': 'Theo WHO-UMC, m·ª©c ƒë·ªô "Conditional" ƒë∆∞·ª£c s·ª≠ d·ª•ng khi n√†o?',
            'question_type': 'multiple_choice',
            'difficulty': 'intermediate',
            'option_a': 'Khi c·∫ßn th√™m th√¥ng tin ƒë·ªÉ ƒë√°nh gi√°',
            'option_b': 'Khi ch·∫Øc ch·∫Øn kh√¥ng li√™n quan ƒë·∫øn thu·ªëc',
            'option_c': 'Khi c√≥ ƒë·∫ßy ƒë·ªß b·∫±ng ch·ª©ng',
            'option_d': 'Khi kh√¥ng ƒë·ªß th√¥ng tin ƒë√°nh gi√°',
            'correct_answer': 'A',
            'explanation': 'M·ª©c ƒë·ªô Conditional ƒë∆∞·ª£c s·ª≠ d·ª•ng khi c·∫ßn th√™m d·ªØ li·ªáu ho·∫∑c th√¥ng tin b·ªï sung ƒë·ªÉ c√≥ th·ªÉ ƒë∆∞a ra ƒë√°nh gi√° h·ª£p l√Ω v·ªÅ m·ªëi li√™n quan nh√¢n-qu·∫£.',
            'reference_source': 'WHO-UMC Guidelines 2018',
            'learning_point_1': 'Conditional = c·∫ßn th√™m th√¥ng tin',
            'learning_point_2': 'Kh√°c v·ªõi Unassessable',
            'learning_point_3': 'C√≥ th·ªÉ ƒë√°nh gi√° ƒë∆∞·ª£c khi c√≥ th√™m data',
            'estimated_time': '75',
            'points': '15'
        },
        {
            'category_key': 'naranjo',
            'question_text': 'Thang Naranjo c√≥ th·ªÉ cho ƒëi·ªÉm √¢m kh√¥ng?',
            'question_type': 'true_false', 
            'difficulty': 'beginner',
            'option_a': '',  # Will be ignored for true/false
            'option_b': '',
            'option_c': '',
            'option_d': '',
            'correct_answer': 'true',
            'explanation': 'ƒê√∫ng. Thang Naranjo c√≥ th·ªÉ cho ƒëi·ªÉm t·ª´ -4 ƒë·∫øn +13. ƒêi·ªÉm √¢m xu·∫•t hi·ªán khi c√≥ c√°c y·∫øu t·ªë lo·∫°i tr·ª´ kh·∫£ nƒÉng ADR.',
            'reference_source': 'Naranjo Algorithm 1981',
            'learning_point_1': 'Range: -4 to +13',
            'learning_point_2': 'ƒêi·ªÉm √¢m = lo·∫°i tr·ª´ ADR',
            'learning_point_3': '',
            'estimated_time': '45',
            'points': '10'
        }
    ]
    
    with open(output_path, 'w', newline='', encoding='utf-8') as csvfile:
        fieldnames = ['category_key', 'question_text', 'question_type', 'difficulty',
                     'option_a', 'option_b', 'option_c', 'option_d', 'correct_answer',
                     'explanation', 'reference_source', 'learning_point_1', 
                     'learning_point_2', 'learning_point_3', 'estimated_time', 'points']
        
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()
        
        for row in sample_data:
            writer.writerow(row)
    
    print(f"‚úÖ Sample CSV file created: {output_path}")

def main():
    parser = argparse.ArgumentParser(description='Convert CSV quiz questions to SQL')
    parser.add_argument('--csv', help='Input CSV file path')
    parser.add_argument('--sql', help='Output SQL file path')
    parser.add_argument('--sample', action='store_true', help='Create sample CSV file')
    
    args = parser.parse_args()
    
    if args.sample:
        create_sample_csv('sample_questions.csv')
        print("\nüìã CSV Format:")
        print("category_key: who_umc, naranjo, drug_knowledge, case_studies, regulations, general")
        print("question_type: multiple_choice, true_false, case_scenario") 
        print("difficulty: beginner, intermediate, advanced, expert")
        print("correct_answer: A, B, C, D (for multiple_choice) or true, false (for true_false)")
        return
    
    if not args.csv or not args.sql:
        print("‚ùå Please provide both --csv and --sql arguments")
        print("Use --sample to create a sample CSV file")
        print("\nExample:")
        print("python csv-to-sql-converter.py --csv questions.csv --sql questions.sql")
        return
    
    success = convert_csv_to_sql(args.csv, args.sql)
    
    if success:
        print("\nüöÄ Next steps:")
        print(f"1. Review the generated SQL file: {args.sql}")
        print("2. Upload to Supabase SQL Editor")
        print("3. Execute the SQL statements")
        print("4. Check the results in quiz_questions table")

if __name__ == "__main__":
    import datetime
    main()



























