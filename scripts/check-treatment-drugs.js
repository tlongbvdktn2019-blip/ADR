#!/usr/bin/env node

/**
 * Script to check treatment_drugs table data and API
 * Run: node scripts/check-treatment-drugs.js
 */

const https = require('https');
const http = require('http');

// Color codes for console
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
};

function log(color, ...args) {
  console.log(color, ...args, colors.reset);
}

async function checkAPI(url) {
  return new Promise((resolve, reject) => {
    const protocol = url.startsWith('https') ? https : http;
    
    protocol.get(url, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        resolve({
          statusCode: res.statusCode,
          data: JSON.parse(data)
        });
      });
    }).on('error', (err) => {
      reject(err);
    });
  });
}

async function main() {
  log(colors.cyan, '\n=================================');
  log(colors.cyan, 'Ki·ªÉm tra Treatment Drugs API');
  log(colors.cyan, '=================================\n');

  // Check if running locally or on production
  const baseUrl = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000';
  const apiUrl = `${baseUrl}/api/public/treatment-drugs`;

  log(colors.blue, 'üìç API URL:', apiUrl);
  log(colors.blue, '‚è≥ ƒêang ki·ªÉm tra...\n');

  try {
    const { statusCode, data } = await checkAPI(apiUrl);

    if (statusCode === 200) {
      log(colors.green, '‚úÖ API ho·∫°t ƒë·ªông t·ªët!');
      log(colors.green, `‚úÖ T√¨m th·∫•y ${data.count || data.treatmentDrugs?.length || 0} nh√≥m thu·ªëc\n`);

      if (data.treatmentDrugs && data.treatmentDrugs.length > 0) {
        log(colors.cyan, 'üìã Danh s√°ch nh√≥m thu·ªëc:');
        log(colors.cyan, '------------------------');
        data.treatmentDrugs.forEach((drug, index) => {
          console.log(`${index + 1}. ${drug.name} (ID: ${drug.id})`);
        });
      } else {
        log(colors.yellow, '‚ö†Ô∏è  C·∫¢NH B√ÅO: B·∫£ng treatment_drugs kh√¥ng c√≥ d·ªØ li·ªáu!');
        log(colors.yellow, '\nH∆∞·ªõng d·∫´n fix:');
        log(colors.yellow, '1. Ch·∫°y migration: supabase db push');
        log(colors.yellow, '2. Ho·∫∑c ch·∫°y file: supabase/migrations/fix_treatment_drugs_public_access.sql');
        log(colors.yellow, '3. Xem h∆∞·ªõng d·∫´n: docs/FIX-TREATMENT-DRUGS-PUBLIC-FORM.md');
      }
    } else {
      log(colors.red, '‚ùå API tr·∫£ v·ªÅ l·ªói!');
      log(colors.red, `Status: ${statusCode}`);
      log(colors.red, 'Response:', JSON.stringify(data, null, 2));
      
      log(colors.yellow, '\nüí° G·ª£i √Ω:');
      log(colors.yellow, '1. Ki·ªÉm tra SUPABASE_SERVICE_ROLE_KEY trong .env.local');
      log(colors.yellow, '2. Ki·ªÉm tra b·∫£ng treatment_drugs c√≥ t·ªìn t·∫°i kh√¥ng');
      log(colors.yellow, '3. Ki·ªÉm tra RLS policies cho b·∫£ng treatment_drugs');
      log(colors.yellow, '4. Xem logs server ƒë·ªÉ bi·∫øt chi ti·∫øt');
    }
  } catch (error) {
    log(colors.red, '‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn API!');
    log(colors.red, 'L·ªói:', error.message);
    
    log(colors.yellow, '\nüí° G·ª£i √Ω:');
    log(colors.yellow, '1. ƒê·∫£m b·∫£o server ƒëang ch·∫°y (npm run dev)');
    log(colors.yellow, '2. Ki·ªÉm tra URL:', apiUrl);
    log(colors.yellow, '3. Ki·ªÉm tra firewall/network');
  }

  log(colors.cyan, '\n=================================\n');
}

main();





