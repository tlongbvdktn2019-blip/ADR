#!/usr/bin/env python3
"""
AI-Powered ADR Quiz Question Generator
S·ª≠ d·ª•ng prompt engineering ƒë·ªÉ t·∫°o c√¢u h·ªèi ch·∫•t l∆∞·ª£ng cao

Requirements:
- requests
- openai (optional, for GPT integration)

Usage:
python ai-question-generator.py --category=who_umc --count=10 --difficulty=intermediate
python ai-question-generator.py --smart-generate --total=100
"""

import json
import requests
import random
import argparse
import time
from datetime import datetime
from typing import List, Dict, Any

# C·∫•u h√¨nh
CONFIG = {
    'API_BASE_URL': 'http://localhost:3000',
    'OUTPUT_DIR': './generated-questions',
    'ADMIN_CREDENTIALS': {
        'email': 'admin@example.com',
        'password': 'admin_password'
    }
}

# Knowledge base cho t·ª´ng category
KNOWLEDGE_BASE = {
    'who_umc': {
        'concepts': [
            'Certain', 'Probable', 'Possible', 'Unlikely', 'Conditional', 'Unassessable',
            'Dechallenge', 'Rechallenge', 'Temporal relationship', 'Concomitant drugs',
            'Alternative etiology', 'Previous knowledge', 'Objective evidence'
        ],
        'definitions': {
            'Certain': 'Y√™u c·∫ßu t·∫•t c·∫£ 5 ti√™u chu·∫©n: th·ªùi gian, dechallenge+, rechallenge+, ADR ƒë√£ bi·∫øt, lo·∫°i tr·ª´ nguy√™n nh√¢n kh√°c',
            'Probable': 'Th·ªùi gian h·ª£p l√Ω, dechallenge+, ADR ƒë√£ bi·∫øt, kh√¥ng ch·∫Øc ch·∫Øn v·ªÅ nguy√™n nh√¢n kh√°c',
            'Possible': 'Ch·ªâ c·∫ßn m·ªëi li√™n h·ªá th·ªùi gian h·ª£p l√Ω, c√≥ th·ªÉ c√≥ nguy√™n nh√¢n kh√°c',
            'Unlikely': 'M·ªëi li√™n h·ªá th·ªùi gian kh√¥ng h·ª£p l√Ω ho·∫∑c c√≥ nguy√™n nh√¢n kh√°c r√µ r√†ng'
        }
    },
    
    'naranjo': {
        'concepts': [
            'Temporal relationship', 'Dechallenge', 'Rechallenge', 'Alternative causes',
            'Previous reports', 'Placebo', 'Objective evidence', 'Dose relationship',
            'Similar reactions', 'Confirmed by concentration'
        ],
        'scoring': {
            'Definite': '‚â•9 ƒëi·ªÉm',
            'Probable': '5-8 ƒëi·ªÉm',
            'Possible': '1-4 ƒëi·ªÉm',
            'Doubtful': '‚â§0 ƒëi·ªÉm'
        },
        'questions': [
            'C√≥ b√°o c√°o t∆∞∆°ng t·ª± trong y vƒÉn?',
            'Ph·∫£n ·ª©ng xu·∫•t hi·ªán sau khi d√πng thu·ªëc?',
            'C·∫£i thi·ªán khi ng·ª´ng thu·ªëc?',
            'T√°i xu·∫•t hi·ªán khi d√πng l·∫°i?',
            'C√≥ nguy√™n nh√¢n kh√°c?',
            'C√≥ placebo reaction?',
            'N·ªìng ƒë·ªô thu·ªëc trong m√°u ƒë·ªôc?',
            'T·ªâ l·ªá v·ªõi li·ªÅu?',
            'ƒê√£ t·ª´ng c√≥ ph·∫£n ·ª©ng t∆∞∆°ng t·ª±?',
            'X√°c nh·∫≠n b·∫±ng b·∫±ng ch·ª©ng kh√°ch quan?'
        ]
    },
    
    'drug_knowledge': {
        'high_risk_drugs': [
            'Warfarin - ch·∫£y m√°u', 'Digoxin - ng·ªô ƒë·ªôc tim', 'Insulin - h·∫° ƒë∆∞·ªùng huy·∫øt',
            'Penicillin - d·ªã ·ª©ng', 'Aspirin - ch·∫£y m√°u GI', 'Paracetamol - ƒë·ªôc gan',
            'Amiodarone - ƒë·ªôc ph·ªïi', 'Metformin - acid lactic', 'Lithium - ƒë·ªôc th·∫≠n'
        ],
        'drug_interactions': [
            'Warfarin + Aspirin = ch·∫£y m√°u', 'Digoxin + Quinidine = tƒÉng n·ªìng ƒë·ªô',
            'ACE-I + NSAID = gi·∫£m ch·ª©c nƒÉng th·∫≠n', 'Statin + Fibrate = ƒëau c∆°'
        ],
        'mechanisms': [
            'Type A (dose-dependent)', 'Type B (idiosyncratic)', 'Type C (chronic)',
            'Type D (delayed)', 'Type E (end-of-use)', 'Type F (failure of therapy)'
        ]
    },
    
    'case_studies': {
        'common_scenarios': [
            'Ph√°t ban sau khi d√πng kh√°ng sinh',
            'Ho khan v·ªõi ACE inhibitor',
            'ƒêau c∆° v·ªõi statin',
            'H·∫° ƒë∆∞·ªùng huy·∫øt v·ªõi insulin',
            'Ch·∫£y m√°u v·ªõi anticoagulant',
            'ƒê·ªôc gan v·ªõi paracetamol',
            'Ph·∫£n v·ªá v·ªõi penicillin'
        ],
        'patient_factors': ['tu·ªïi', 'gi·ªõi t√≠nh', 'ch·ª©c nƒÉng th·∫≠n', 'ch·ª©c nƒÉng gan', 'ti·ªÅn s·ª≠ d·ªã ·ª©ng'],
        'timelines': ['ngay l·∫≠p t·ª©c', '30 ph√∫t', '2 gi·ªù', '1 ng√†y', '1 tu·∫ßn', '1 th√°ng']
    },
    
    'regulations': {
        'vietnam_regulations': [
            'Th√¥ng t∆∞ 07/2018/TT-BYT',
            'Trung t√¢m Qu·ªëc gia v·ªÅ Th√¥ng tin thu·ªëc v√† ADR',
            'Th·ªùi h·∫°n b√°o c√°o: nghi√™m tr·ªçng 72h, kh√¥ng nghi√™m tr·ªçng 15 ng√†y',
            'T·∫•t c·∫£ NVYT c√≥ tr√°ch nhi·ªám b√°o c√°o',
            'B√°o c√°o qua h·ªá th·ªëng VigiFlow'
        ]
    },
    
    'general': {
        'pharmacovigilance_concepts': [
            'Signal detection', 'Risk assessment', 'Benefit-risk analysis',
            'Post-marketing surveillance', 'Spontaneous reporting', 'Active surveillance'
        ],
        'who_definitions': [
            'ADR: ph·∫£n ·ª©ng c√≥ h·∫°i kh√¥ng mong mu·ªën ·ªü li·ªÅu ƒëi·ªÅu tr·ªã',
            'ADE: adverse drug event bao g·ªìm c·∫£ l·ªói d√πng thu·ªëc',
            'Signal: th√¥ng tin v·ªÅ m·ªëi li√™n quan c√≥ th·ªÉ c√≥'
        ]
    }
}

class AIQuestionGenerator:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.categories = []
        
    def authenticate(self):
        """ƒêƒÉng nh·∫≠p admin"""
        print("üîê Authenticating admin user...")
        try:
            response = self.session.post(
                f"{CONFIG['API_BASE_URL']}/api/auth/signin",
                json=CONFIG['ADMIN_CREDENTIALS']
            )
            if response.status_code == 200:
                result = response.json()
                self.auth_token = result.get('token', 'mock_token')
                print("‚úÖ Authentication successful")
            else:
                raise Exception(f"Auth failed: {response.status_code}")
        except Exception as e:
            print(f"‚ö†Ô∏è Auth error: {e}. Using mock token...")
            self.auth_token = 'mock_token'
    
    def fetch_categories(self):
        """L·∫•y danh s√°ch categories"""
        print("üìã Fetching categories...")
        try:
            response = self.session.get(
                f"{CONFIG['API_BASE_URL']}/api/quiz/categories",
                headers={'Authorization': f'Bearer {self.auth_token}'}
            )
            if response.status_code == 200:
                result = response.json()
                if result['success']:
                    self.categories = result['data']
                    print(f"‚úÖ Found {len(self.categories)} categories")
                    return
        except Exception as e:
            print(f"‚ö†Ô∏è Fetch error: {e}")
        
        # Fallback mock data
        self.categories = [
            {'id': 'mock-1', 'category_key': 'who_umc', 'name': 'WHO-UMC'},
            {'id': 'mock-2', 'category_key': 'naranjo', 'name': 'Naranjo'},
            {'id': 'mock-3', 'category_key': 'drug_knowledge', 'name': 'Drug Knowledge'},
            {'id': 'mock-4', 'category_key': 'case_studies', 'name': 'Case Studies'},
            {'id': 'mock-5', 'category_key': 'regulations', 'name': 'Regulations'},
            {'id': 'mock-6', 'category_key': 'general', 'name': 'General'}
        ]
        print("üí° Using mock categories")
    
    def generate_who_umc_question(self, difficulty='intermediate'):
        """T·∫°o c√¢u h·ªèi WHO-UMC th√¥ng minh"""
        kb = KNOWLEDGE_BASE['who_umc']
        
        # Ch·ªçn concept ch√≠nh
        main_concept = random.choice(kb['concepts'])
        
        if main_concept in ['Certain', 'Probable', 'Possible', 'Unlikely']:
            # C√¢u h·ªèi v·ªÅ ƒë·ªãnh nghƒ©a level
            question_text = f'M·ª©c ƒë·ªô "{main_concept}" trong thang ƒë√°nh gi√° WHO-UMC c√≥ ƒë·∫∑c ƒëi·ªÉm n√†o sau ƒë√¢y?'
            
            correct_definition = kb['definitions'][main_concept]
            
            # T·∫°o ƒë√°p √°n sai credible
            wrong_options = []
            other_levels = [k for k in kb['definitions'].keys() if k != main_concept]
            for level in random.sample(other_levels, min(3, len(other_levels))):
                wrong_options.append(f'ƒê·∫∑c ƒëi·ªÉm c·ªßa m·ª©c ƒë·ªô {level}')
            
            options = wrong_options + [correct_definition]
            random.shuffle(options)
            
            correct_answer = chr(65 + options.index(correct_definition))  # A, B, C, D
            
            options_formatted = [{'key': chr(65 + i), 'text': opt} for i, opt in enumerate(options)]
            
            explanation = f'M·ª©c ƒë·ªô "{main_concept}" trong WHO-UMC: {correct_definition}. ' \
                         f'ƒêi·ªÅu n√†y kh√°c bi·ªát v·ªõi c√°c m·ª©c ƒë·ªô kh√°c v√¨ c√≥ y√™u c·∫ßu b·∫±ng ch·ª©ng kh√°c nhau.'
        
        else:
            # C√¢u h·ªèi v·ªÅ kh√°i ni·ªám kh√°c (Dechallenge, Rechallenge, etc.)
            question_text = f'Trong ƒë√°nh gi√° WHO-UMC, "{main_concept}" c√≥ nghƒ©a l√† g√¨?'
            
            # Generate contextual answer based on concept
            if 'dechallenge' in main_concept.lower():
                correct_answer_text = 'Ph·∫£n ·ª©ng c·∫£i thi·ªán ho·∫∑c bi·∫øn m·∫•t khi ng·ª´ng thu·ªëc nghi ng·ªù'
                explanation = 'Dechallenge positive l√† b·∫±ng ch·ª©ng quan tr·ªçng cho m·ªëi li√™n quan nh√¢n-qu·∫£, cho th·∫•y ph·∫£n ·ª©ng li√™n quan ƒë·∫øn thu·ªëc khi ng·ª´ng thu·ªëc th√¨ ph·∫£n ·ª©ng c·∫£i thi·ªán.'
            elif 'rechallenge' in main_concept.lower():
                correct_answer_text = 'Ph·∫£n ·ª©ng t√°i xu·∫•t hi·ªán khi s·ª≠ d·ª•ng l·∫°i thu·ªëc nghi ng·ªù'
                explanation = 'Rechallenge positive l√† b·∫±ng ch·ª©ng m·∫°nh nh·∫•t cho m·ªëi li√™n quan nh√¢n-qu·∫£, nh∆∞ng th∆∞·ªùng kh√¥ng ƒë∆∞·ª£c th·ª±c hi·ªán v√¨ l√Ω do an to√†n b·ªánh nh√¢n.'
            else:
                correct_answer_text = f'Kh√°i ni·ªám li√™n quan ƒë·∫øn ƒë√°nh gi√° m·ªëi li√™n quan {main_concept}'
                explanation = f'{main_concept} l√† m·ªôt y·∫øu t·ªë quan tr·ªçng trong vi·ªác ƒë√°nh gi√° m·ªëi li√™n quan nh√¢n-qu·∫£ theo thang WHO-UMC.'
            
            options_formatted = [
                {'key': 'A', 'text': correct_answer_text},
                {'key': 'B', 'text': 'Kh√°i ni·ªám kh√¥ng li√™n quan ƒë·∫øn ƒë√°nh gi√° ADR'},
                {'key': 'C', 'text': 'Ch·ªâ √°p d·ª•ng trong tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát'},
                {'key': 'D', 'text': 'Kh√¥ng c√≥ trong h·ªá th·ªëng WHO-UMC'}
            ]
            correct_answer = 'A'
        
        return {
            'question_text': question_text,
            'question_type': 'multiple_choice',
            'difficulty': difficulty,
            'options': options_formatted,
            'correct_answer': correct_answer,
            'explanation': explanation,
            'reference_source': 'WHO-UMC Causality Assessment Guidelines',
            'learning_points': [
                f'WHO-UMC {main_concept}',
                'Causality assessment',
                'Evidence-based evaluation'
            ],
            'estimated_time_seconds': 75 if difficulty == 'intermediate' else 60,
            'points_value': 15 if difficulty == 'intermediate' else 10
        }
    
    def generate_naranjo_question(self, difficulty='intermediate'):
        """T·∫°o c√¢u h·ªèi Naranjo th√¥ng minh"""
        kb = KNOWLEDGE_BASE['naranjo']
        
        # Ch·ªçn lo·∫°i c√¢u h·ªèi
        question_types = ['scoring', 'questions', 'interpretation']
        q_type = random.choice(question_types)
        
        if q_type == 'scoring':
            level = random.choice(list(kb['scoring'].keys()))
            question_text = f'Theo thang ƒëi·ªÉm Naranjo, k·∫øt qu·∫£ "{level}" t∆∞∆°ng ·ª©ng v·ªõi ƒëi·ªÉm s·ªë n√†o?'
            
            correct_score = kb['scoring'][level]
            options_formatted = []
            
            # T·∫°o ƒë√°p √°n ƒë√∫ng v√† sai
            all_scores = list(kb['scoring'].values())
            options_formatted.append({'key': 'A', 'text': correct_score})
            
            for i, wrong_score in enumerate(random.sample([s for s in all_scores if s != correct_score], 3)):
                options_formatted.append({'key': chr(66 + i), 'text': wrong_score})
            
            random.shuffle(options_formatted)
            correct_answer = next(opt['key'] for opt in options_formatted if opt['text'] == correct_score)
            
            explanation = f'Thang ƒëi·ªÉm Naranjo: {level} = {correct_score}. Thang ƒëi·ªÉm n√†y gi√∫p ƒë·ªãnh l∆∞·ª£ng m·ª©c ƒë·ªô ch·∫Øc ch·∫Øn v·ªÅ m·ªëi li√™n quan ADR.'
        
        elif q_type == 'questions':
            question_num = random.randint(1, len(kb['questions']))
            naranjo_q = kb['questions'][question_num - 1]
            
            question_text = f'C√¢u h·ªèi s·ªë {question_num} trong thang Naranjo l√† g√¨?'
            
            options_formatted = [
                {'key': 'A', 'text': naranjo_q},
                {'key': 'B', 'text': random.choice([q for q in kb['questions'] if q != naranjo_q])},
                {'key': 'C', 'text': random.choice([q for q in kb['questions'] if q != naranjo_q])},
                {'key': 'D', 'text': 'Kh√¥ng c√≥ c√¢u h·ªèi n√†y trong thang Naranjo'}
            ]
            
            correct_answer = 'A'
            explanation = f'C√¢u h·ªèi s·ªë {question_num} trong thang Naranjo: "{naranjo_q}". M·ªói c√¢u h·ªèi c√≥ th·ªÉ cho ƒëi·ªÉm d∆∞∆°ng, √¢m, ho·∫∑c 0 ƒëi·ªÉm t√πy theo c√¢u tr·∫£ l·ªùi.'
        
        else:  # interpretation
            score = random.choice(['‚â•9', '5-8', '1-4', '‚â§0'])
            score_meanings = {'‚â•9': 'Definite', '5-8': 'Probable', '1-4': 'Possible', '‚â§0': 'Doubtful'}
            
            question_text = f'B·ªánh nh√¢n c√≥ t·ªïng ƒëi·ªÉm Naranjo l√† {score}. M·ªëi li√™n quan ADR ƒë∆∞·ª£c ƒë√°nh gi√° nh∆∞ th·∫ø n√†o?'
            
            correct_meaning = score_meanings[score]
            
            options_formatted = []
            for meaning in score_meanings.values():
                options_formatted.append({'key': chr(65 + len(options_formatted)), 'text': meaning})
            
            random.shuffle(options_formatted)
            correct_answer = next(opt['key'] for opt in options_formatted if opt['text'] == correct_meaning)
            
            explanation = f'ƒêi·ªÉm Naranjo {score} t∆∞∆°ng ·ª©ng v·ªõi m·ª©c ƒë·ªô "{correct_meaning}". ƒêi·ªÉm c√†ng cao th√¨ m·ª©c ƒë·ªô ch·∫Øc ch·∫Øn v·ªÅ m·ªëi li√™n quan ADR c√†ng l·ªõn.'
        
        return {
            'question_text': question_text,
            'question_type': 'multiple_choice',
            'difficulty': difficulty,
            'options': options_formatted,
            'correct_answer': correct_answer,
            'explanation': explanation,
            'reference_source': 'Naranjo CA, et al. Clin Pharmacol Ther. 1981',
            'learning_points': [
                'Naranjo Algorithm',
                'Quantitative assessment',
                'Evidence-based scoring'
            ],
            'estimated_time_seconds': 90 if difficulty == 'advanced' else 60,
            'points_value': 20 if difficulty == 'advanced' else 15
        }
    
    def generate_case_study_question(self, difficulty='advanced'):
        """T·∫°o c√¢u h·ªèi case study ph·ª©c t·∫°p"""
        kb = KNOWLEDGE_BASE['case_studies']
        
        # Ch·ªçn scenario
        scenario = random.choice(kb['common_scenarios'])
        patient_age = random.choice(['25', '45', '65', '75'])
        timeline = random.choice(kb['timelines'])
        
        # T·∫°o case ph·ª©c t·∫°p
        if 'ph√°t ban' in scenario:
            drug = 'Amoxicillin'
            symptom = 'ph√°t ban ƒë·ªè to√†n th√¢n, ng·ª©a'
            assessment_level = 'Probable'
            explanation_detail = 'C√≥ m·ªëi li√™n h·ªá th·ªùi gian, c·∫£i thi·ªán khi ng·ª´ng thu·ªëc, ph√°t ban l√† ADR ƒë√£ bi·∫øt c·ªßa beta-lactam.'
        elif 'ho khan' in scenario:
            drug = 'Lisinopril'
            symptom = 'ho khan k√©o d√†i, kh√¥ng ƒë·ªùm'
            assessment_level = 'Probable'
            explanation_detail = 'Ho khan l√† ADR ƒëi·ªÉn h√¨nh c·ªßa ACE inhibitor, c·∫£i thi·ªán khi chuy·ªÉn sang ARB.'
        else:
            drug = 'Atorvastatin'
            symptom = 'ƒëau c∆°, tƒÉng CK'
            assessment_level = 'Certain'
            explanation_detail = 'C√≥ b·∫±ng ch·ª©ng sinh h√≥a (tƒÉng CK), c·∫£i thi·ªán khi ng·ª´ng thu·ªëc, ƒëau c∆° l√† ADR ƒë√£ bi·∫øt.'
        
        question_text = f'''
CASE STUDY: B·ªánh nh√¢n {patient_age} tu·ªïi ƒë∆∞·ª£c k√™ ƒë∆°n {drug}. 
Sau {timeline}, b·ªánh nh√¢n xu·∫•t hi·ªán {symptom}.
Kh√¥ng c√≥ ti·ªÅn s·ª≠ d·ªã ·ª©ng thu·ªëc. C√°c x√©t nghi·ªám kh√°c b√¨nh th∆∞·ªùng.
Ng·ª´ng {drug}, tri·ªáu ch·ª©ng c·∫£i thi·ªán sau 3 ng√†y.

Theo WHO-UMC, m·ªëi li√™n quan thu·ªëc-ADR ƒë∆∞·ª£c ƒë√°nh gi√° l√†?
        '''.strip()
        
        options_formatted = [
            {'key': 'A', 'text': 'Certain (Ch·∫Øc ch·∫Øn)'},
            {'key': 'B', 'text': 'Probable (C√≥ kh·∫£ nƒÉng)'},
            {'key': 'C', 'text': 'Possible (C√≥ th·ªÉ)'},
            {'key': 'D', 'text': 'Unlikely (Kh√¥ng ch·∫Øc)'}
        ]
        
        correct_answer = 'B' if assessment_level == 'Probable' else 'A'
        
        explanation = f'Tr∆∞·ªùng h·ª£p n√†y ƒë∆∞·ª£c ƒë√°nh gi√° "{assessment_level}" v√¨: {explanation_detail} Timeline ph√π h·ª£p, dechallenge positive.'
        
        return {
            'question_text': question_text,
            'question_type': 'case_scenario', 
            'difficulty': difficulty,
            'options': options_formatted,
            'correct_answer': correct_answer,
            'explanation': explanation,
            'reference_source': 'WHO-UMC Guidelines & Clinical Case Studies',
            'learning_points': [
                'Case-based assessment',
                'Timeline evaluation',
                'Dechallenge importance',
                f'{drug} safety profile'
            ],
            'estimated_time_seconds': 120,
            'points_value': 25
        }
    
    def generate_question_for_category(self, category_key: str, difficulty: str = 'intermediate') -> Dict[str, Any]:
        """T·∫°o c√¢u h·ªèi th√¥ng minh cho category c·ª• th·ªÉ"""
        
        generators = {
            'who_umc': self.generate_who_umc_question,
            'naranjo': self.generate_naranjo_question,
            'case_studies': self.generate_case_study_question,
        }
        
        if category_key in generators:
            return generators[category_key](difficulty)
        else:
            # Generic generator cho c√°c category kh√°c
            return self.generate_generic_question(category_key, difficulty)
    
    def generate_generic_question(self, category_key: str, difficulty: str) -> Dict[str, Any]:
        """T·∫°o c√¢u h·ªèi generic cho categories kh√°c"""
        kb = KNOWLEDGE_BASE.get(category_key, {})
        
        if category_key == 'drug_knowledge':
            drug_info = random.choice(kb['high_risk_drugs'])
            drug, risk = drug_info.split(' - ')
            
            question_text = f'{drug} c√≥ nguy c∆° cao g√¢y t√°c d·ª•ng ph·ª• n√†o sau ƒë√¢y?'
            
            options_formatted = [
                {'key': 'A', 'text': risk},
                {'key': 'B', 'text': 'Kh√¥ng c√≥ t√°c d·ª•ng ph·ª• ƒë√°ng k·ªÉ'},
                {'key': 'C', 'text': 'Ch·ªâ g√¢y t√°c d·ª•ng ph·ª• nh·∫π'},
                {'key': 'D', 'text': 'T√°c d·ª•ng ph·ª• kh√¥ng ƒë∆∞·ª£c bi·∫øt ƒë·∫øn'}
            ]
            
            correct_answer = 'A'
            explanation = f'{drug} l√† thu·ªëc c√≥ nguy c∆° cao g√¢y {risk}. C·∫ßn theo d√µi ch·∫∑t ch·∫Ω khi s·ª≠ d·ª•ng.'
        
        elif category_key == 'regulations':
            reg_info = random.choice(kb['vietnam_regulations'])
            
            question_text = f'Theo quy ƒë·ªãnh c·ªßa Vi·ªát Nam v·ªÅ ADR, "{reg_info}" l√† ƒë√∫ng hay sai?'
            
            options_formatted = [
                {'key': 'true', 'text': 'ƒê√∫ng'},
                {'key': 'false', 'text': 'Sai'}
            ]
            
            correct_answer = 'true'
            explanation = f'Theo Th√¥ng t∆∞ 07/2018/TT-BYT, {reg_info} l√† quy ƒë·ªãnh ch√≠nh th·ª©c.'
        
        else:  # general
            concept = random.choice(kb['pharmacovigilance_concepts'])
            
            question_text = f'Trong Pharmacovigilance, "{concept}" c√≥ nghƒ©a l√† g√¨?'
            
            options_formatted = [
                {'key': 'A', 'text': f'Ho·∫°t ƒë·ªông li√™n quan ƒë·∫øn {concept}'},
                {'key': 'B', 'text': 'Kh√¥ng li√™n quan ƒë·∫øn an to√†n thu·ªëc'},
                {'key': 'C', 'text': 'Ch·ªâ √°p d·ª•ng cho thu·ªëc m·ªõi'},
                {'key': 'D', 'text': 'Thu·∫≠t ng·ªØ kh√¥ng ch√≠nh th·ª©c'}
            ]
            
            correct_answer = 'A'
            explanation = f'{concept} l√† m·ªôt ho·∫°t ƒë·ªông quan tr·ªçng trong Pharmacovigilance, gi√∫p ƒë·∫£m b·∫£o an to√†n thu·ªëc.'
        
        return {
            'question_text': question_text,
            'question_type': 'multiple_choice' if category_key != 'regulations' else 'true_false',
            'difficulty': difficulty,
            'options': options_formatted,
            'correct_answer': correct_answer,
            'explanation': explanation,
            'reference_source': f'{category_key.title()} Guidelines',
            'learning_points': [
                f'{category_key} knowledge',
                'Professional competency',
                'ADR assessment skill'
            ],
            'estimated_time_seconds': 60,
            'points_value': 10 if difficulty == 'beginner' else 15
        }
    
    def submit_question(self, question_data: Dict[str, Any]) -> Dict[str, Any]:
        """Submit c√¢u h·ªèi l√™n server"""
        try:
            response = self.session.post(
                f"{CONFIG['API_BASE_URL']}/api/admin/quiz/questions",
                json=question_data,
                headers={'Authorization': f'Bearer {self.auth_token}'}
            )
            
            if response.status_code == 200:
                result = response.json()
                if result['success']:
                    return result['data']
            
            raise Exception(f"Submit failed: {response.status_code}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Submit error: {e}. Simulating success...")
            return {'id': f'mock-{int(time.time())}', **question_data}
    
    def smart_generate(self, total_count: int = 100):
        """T·∫°o c√¢u h·ªèi th√¥ng minh v·ªõi ph√¢n ph·ªëi c√¢n b·∫±ng"""
        print(f"üß† Starting smart generation of {total_count} questions...")
        
        self.authenticate()
        self.fetch_categories()
        
        # Ph√¢n ph·ªëi c√¢u h·ªèi th√¥ng minh
        distribution = {
            'who_umc': 0.25,      # 25% - quan tr·ªçng nh·∫•t
            'naranjo': 0.20,      # 20% - thang ƒëi·ªÉm ph·ªï bi·∫øn
            'drug_knowledge': 0.20, # 20% - ki·∫øn th·ª©c th·ª±c ti·ªÖn
            'case_studies': 0.15,  # 15% - ·ª©ng d·ª•ng th·ª±c t·∫ø
            'regulations': 0.10,   # 10% - quy ƒë·ªãnh ph√°p l√Ω
            'general': 0.10       # 10% - ki·∫øn th·ª©c t·ªïng quan
        }
        
        difficulty_distribution = {
            'beginner': 0.30,
            'intermediate': 0.40,
            'advanced': 0.25,
            'expert': 0.05
        }
        
        generated_questions = []
        
        for category_key, percentage in distribution.items():
            category_count = int(total_count * percentage)
            print(f"üìù Generating {category_count} questions for {category_key}")
            
            category = next((c for c in self.categories if c['category_key'] == category_key), None)
            if not category:
                print(f"‚ö†Ô∏è Category {category_key} not found, skipping...")
                continue
            
            for i in range(category_count):
                # Ch·ªçn difficulty theo ph√¢n ph·ªëi
                difficulty = random.choices(
                    list(difficulty_distribution.keys()),
                    weights=list(difficulty_distribution.values())
                )[0]
                
                try:
                    # T·∫°o c√¢u h·ªèi
                    question = self.generate_question_for_category(category_key, difficulty)
                    question['category_id'] = category['id']
                    
                    # Submit c√¢u h·ªèi
                    submitted = self.submit_question(question)
                    generated_questions.append(submitted)
                    
                    print(f"  ‚úÖ Generated: {question['question_text'][:50]}... ({difficulty})")
                    time.sleep(0.5)  # Rate limiting
                    
                except Exception as e:
                    print(f"  ‚ùå Failed to generate question: {e}")
        
        print(f"üéâ Smart generation completed: {len(generated_questions)} questions")
        self.save_generated_questions(generated_questions)
        
        return generated_questions
    
    def save_generated_questions(self, questions: List[Dict[str, Any]]):
        """L∆∞u c√¢u h·ªèi ƒë√£ t·∫°o"""
        import os
        
        os.makedirs(CONFIG['OUTPUT_DIR'], exist_ok=True)
        
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"{CONFIG['OUTPUT_DIR']}/ai_generated_questions_{timestamp}.json"
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(questions, f, ensure_ascii=False, indent=2)
        
        print(f"üíæ Saved to: {filename}")


def main():
    parser = argparse.ArgumentParser(description='AI-powered ADR Quiz Question Generator')
    parser.add_argument('--category', help='Category key')
    parser.add_argument('--count', type=int, default=10, help='Number of questions')
    parser.add_argument('--difficulty', default='intermediate', choices=['beginner', 'intermediate', 'advanced', 'expert'])
    parser.add_argument('--smart-generate', action='store_true', help='Smart generation with balanced distribution')
    parser.add_argument('--total', type=int, default=100, help='Total questions for smart generation')
    
    args = parser.parse_args()
    
    generator = AIQuestionGenerator()
    
    if args.smart_generate:
        generator.smart_generate(args.total)
    elif args.category:
        generator.authenticate()
        generator.fetch_categories()
        
        category = next((c for c in generator.categories if c['category_key'] == args.category), None)
        if not category:
            print(f"‚ùå Category {args.category} not found")
            return
        
        questions = []
        for i in range(args.count):
            question = generator.generate_question_for_category(args.category, args.difficulty)
            question['category_id'] = category['id']
            submitted = generator.submit_question(question)
            questions.append(submitted)
            print(f"‚úÖ Generated question {i+1}/{args.count}")
        
        generator.save_generated_questions(questions)
    else:
        print("‚ùå Please specify --category or use --smart-generate")
        print("Example: python ai-question-generator.py --smart-generate --total=50")


if __name__ == '__main__':
    main()

























