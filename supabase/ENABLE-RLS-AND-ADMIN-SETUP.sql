-- üîê ENABLE RLS AND ADMIN QUIZ MANAGEMENT
-- Script ƒë·ªÉ b·∫≠t l·∫°i RLS v√† thi·∫øt l·∫≠p quy·ªÅn admin t·∫°o c√¢u h·ªèi

-- =====================================
-- STEP 1: B·∫≠t l·∫°i RLS tr√™n quiz_questions
-- =====================================
ALTER TABLE quiz_questions ENABLE ROW LEVEL SECURITY;

-- =====================================
-- STEP 2: ƒê·∫£m b·∫£o users table c√≥ RLS v√† policy c·∫ßn thi·∫øt
-- =====================================
ALTER TABLE users ENABLE ROW LEVEL SECURITY;

-- Drop v√† t·∫°o l·∫°i policy cho users
DROP POLICY IF EXISTS "users_view_own_profile" ON users;
DROP POLICY IF EXISTS "Users can view their own profile" ON users;

CREATE POLICY "users_view_own_profile" ON users
    FOR SELECT 
    TO authenticated
    USING (id::text = auth.uid()::text);

-- =====================================
-- STEP 3: Drop t·∫•t c·∫£ policies c≈© tr√™n quiz_questions
-- =====================================
DROP POLICY IF EXISTS "view_active_questions" ON quiz_questions;
DROP POLICY IF EXISTS "admin_select_questions" ON quiz_questions;
DROP POLICY IF EXISTS "admin_insert_questions" ON quiz_questions;
DROP POLICY IF EXISTS "admin_update_questions" ON quiz_questions;
DROP POLICY IF EXISTS "admin_delete_questions" ON quiz_questions;
DROP POLICY IF EXISTS "temp_allow_all" ON quiz_questions;
DROP POLICY IF EXISTS "users_view_active_questions" ON quiz_questions;
DROP POLICY IF EXISTS "admin_full_access_questions" ON quiz_questions;
DROP POLICY IF EXISTS "quiz_questions_select_policy" ON quiz_questions;
DROP POLICY IF EXISTS "quiz_questions_admin_policy" ON quiz_questions;

-- =====================================
-- STEP 4: T·∫°o policies m·ªõi cho quiz_questions
-- =====================================

-- Policy 1: Authenticated users c√≥ th·ªÉ xem questions active & approved
CREATE POLICY "users_view_active_questions" ON quiz_questions
    FOR SELECT 
    TO authenticated
    USING (is_active = true AND review_status = 'approved');

-- Policy 2: Admin c√≥ to√†n quy·ªÅn v·ªõi quiz questions
CREATE POLICY "admin_full_access_questions" ON quiz_questions
    FOR ALL 
    TO authenticated
    USING (
        EXISTS (
            SELECT 1 FROM users 
            WHERE users.id::text = auth.uid()::text 
            AND users.role = 'admin'
        )
    )
    WITH CHECK (
        EXISTS (
            SELECT 1 FROM users 
            WHERE users.id::text = auth.uid()::text 
            AND users.role = 'admin'
        )
    );

-- =====================================
-- STEP 5: Ki·ªÉm tra setup
-- =====================================

-- Test 1: Ki·ªÉm tra RLS ƒë√£ ƒë∆∞·ª£c b·∫≠t
SELECT 
    'RLS STATUS CHECK' as test_name,
    tablename,
    rowsecurity as rls_enabled,
    CASE 
        WHEN rowsecurity THEN '‚úÖ RLS ƒë√£ b·∫≠t'
        ELSE '‚ùå RLS ch∆∞a b·∫≠t'
    END as status
FROM pg_tables 
WHERE tablename IN ('quiz_questions', 'users')
ORDER BY tablename;

-- Test 2: Ki·ªÉm tra user hi·ªán t·∫°i
SELECT 
    'CURRENT USER CHECK' as test_name,
    auth.uid() as user_id,
    auth.email() as email,
    u.name,
    u.role,
    CASE 
        WHEN u.role = 'admin' THEN '‚úÖ ADMIN - C√≥ th·ªÉ t·∫°o c√¢u h·ªèi' 
        ELSE '‚ùå USER - Ch·ªâ xem ƒë∆∞·ª£c c√¢u h·ªèi'
    END as permission_status
FROM users u 
WHERE u.id::text = auth.uid()::text;

-- Test 3: Ki·ªÉm tra policies
SELECT 
    'RLS POLICIES CHECK' as test_name,
    policyname,
    cmd as operation,
    CASE 
        WHEN policyname LIKE '%admin%' THEN 'üîê Admin access'
        WHEN policyname LIKE '%view%' OR policyname LIKE '%select%' THEN 'üëÅÔ∏è View access'
        ELSE '‚ùì Other policy'
    END as description
FROM pg_policies 
WHERE tablename = 'quiz_questions'
ORDER BY policyname;

-- Test 4: ƒê·∫øm c√¢u h·ªèi c√≥ th·ªÉ xem
SELECT 
    'QUESTIONS VISIBLE COUNT' as test_name,
    COUNT(*) as visible_questions,
    '‚úÖ S·ªë c√¢u h·ªèi user th∆∞·ªùng c√≥ th·ªÉ xem' as description
FROM quiz_questions 
WHERE is_active = true AND review_status = 'approved';

-- =====================================
-- STEP 6: Th√¥ng b√°o ho√†n th√†nh
-- =====================================
SELECT 
    'üéâ SETUP COMPLETE!' as status,
    'RLS ƒë√£ ƒë∆∞·ª£c b·∫≠t l·∫°i v√† policies ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p' as message,
    'Admin c√≥ th·ªÉ t·∫°o c√¢u h·ªèi, User th∆∞·ªùng ch·ªâ xem c√¢u h·ªèi approved' as note;

-- =====================================
-- OPTIONAL: N·∫øu c·∫ßn t·∫°o admin user m·ªõi (uncomment n·∫øu c·∫ßn)
-- =====================================
/*
-- T·∫°o admin user (thay YOUR_EMAIL b·∫±ng email th·ª±c)
INSERT INTO users (email, name, role, organization)
VALUES ('admin@soytetravinh.gov.vn', 'Admin S·ªü Y T·∫ø', 'admin', 'S·ªü Y T·∫ø Tr√† Vinh')
ON CONFLICT (email) 
DO UPDATE SET 
    role = 'admin',
    updated_at = now();
    
-- Ho·∫∑c c·∫≠p nh·∫≠t user hi·ªán t·∫°i th√†nh admin
-- UPDATE users 
-- SET role = 'admin' 
-- WHERE email = 'your-email@domain.com';
*/






