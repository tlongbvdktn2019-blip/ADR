'use client'

import { useState, useEffect } from 'react'
import Input from '@/components/ui/Input'
import Textarea from '@/components/ui/Textarea'
import Select from '@/components/ui/Select'
import Button from '@/components/ui/Button'
import Card from '@/components/ui/Card'
import { PlusIcon, TrashIcon } from '@heroicons/react/24/outline'
import { SuspectedDrug } from '@/app/reports/new/page'
import { ConcurrentDrugFormData, createEmptyConcurrentDrug, CONCURRENT_DRUG_LABELS } from '@/types/concurrent-drug'

interface SuspectedDrugsSectionProps {
  drugs: SuspectedDrug[]
  updateDrugs: (drugs: SuspectedDrug[]) => void
  concurrentDrugs?: ConcurrentDrugFormData[]
  updateConcurrentDrugs?: (drugs: ConcurrentDrugFormData[]) => void
}

export default function SuspectedDrugsSection({ 
  drugs, 
  updateDrugs, 
  concurrentDrugs = [], 
  updateConcurrentDrugs = () => {} 
}: SuspectedDrugsSectionProps) {
  const [treatmentDrugs, setTreatmentDrugs] = useState<{ id: string; name: string }[]>([])
  const [loadingTreatmentDrugs, setLoadingTreatmentDrugs] = useState(true)
  const [treatmentDrugsError, setTreatmentDrugsError] = useState<string | null>(null)

  // Fetch treatment drugs on component mount
  useEffect(() => {
    const fetchTreatmentDrugs = async () => {
      try {
        console.log('üîÑ Fetching treatment drugs...')
        console.log('Current URL:', window.location.href)
        
        // Try authenticated API first
        let response = await fetch('/api/treatment-drugs', {
          cache: 'no-store',
          headers: {
            'Accept': 'application/json'
          }
        })
        
        console.log('Auth API response status:', response.status)
        
        // If unauthorized (public report), try public API
        if (response.status === 401) {
          console.log('‚ÑπÔ∏è Auth required, using public API for treatment drugs')
          response = await fetch('/api/public/treatment-drugs', {
            cache: 'no-store',
            headers: {
              'Accept': 'application/json'
            }
          })
          console.log('Public API response status:', response.status)
        }
        
        // Check content type before parsing
        const contentType = response.headers.get('content-type')
        console.log('Response content-type:', contentType)
        
        if (response.ok) {
          // Make sure it's JSON
          if (!contentType || !contentType.includes('application/json')) {
            console.error('‚ùå Response is not JSON, content-type:', contentType)
            const textResponse = await response.text()
            console.error('Response preview:', textResponse.substring(0, 200))
            throw new Error('Server returned non-JSON response. Please refresh the page.')
          }
          
          const data = await response.json()
          console.log('‚úÖ Successfully fetched treatment drugs:', data.count || data.treatmentDrugs?.length || 0)
          
          if (!data.treatmentDrugs || data.treatmentDrugs.length === 0) {
            console.warn('‚ö†Ô∏è No treatment drugs found in database')
            setTreatmentDrugsError('Ch∆∞a c√≥ d·ªØ li·ªáu nh√≥m thu·ªëc ƒëi·ªÅu tr·ªã. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.')
          }
          
          setTreatmentDrugs(data.treatmentDrugs || [])
        } else {
          const errorData = await response.json().catch(() => ({}))
          console.error('‚ùå Failed to fetch treatment drugs:', response.status, errorData)
          setTreatmentDrugsError(`Kh√¥ng th·ªÉ t·∫£i danh s√°ch nh√≥m thu·ªëc (L·ªói ${response.status})`)
        }
      } catch (error) {
        console.error('‚ùå Error fetching treatment drugs:', error)
        setTreatmentDrugsError('C√≥ l·ªói khi t·∫£i danh s√°ch nh√≥m thu·ªëc ƒëi·ªÅu tr·ªã')
      } finally {
        setLoadingTreatmentDrugs(false)
      }
    }

    fetchTreatmentDrugs()
  }, [])

  const reactionOptions = [
    { value: 'yes', label: 'C√≥' },
    { value: 'no', label: 'Kh√¥ng' },
    { value: 'not_stopped', label: 'Kh√¥ng ng·ª´ng/gi·∫£m li·ªÅu' },
    { value: 'no_information', label: 'Kh√¥ng c√≥ th√¥ng tin' },
  ]

  const rechallengeOptions = [
    { value: 'yes', label: 'C√≥' },
    { value: 'no', label: 'Kh√¥ng' },
    { value: 'not_rechallenged', label: 'Kh√¥ng t√°i s·ª≠ d·ª•ng' },
    { value: 'no_information', label: 'Kh√¥ng c√≥ th√¥ng tin' },
  ]

  // Convert treatment drugs to select options
  const treatmentDrugOptions = treatmentDrugs.map(drug => ({
    value: drug.name,
    label: drug.name
  }))

  const addDrug = () => {
    const newDrug: SuspectedDrug = {
      id: Date.now().toString(),
      drug_name: '',
      commercial_name: '',
      dosage_form: '',
      manufacturer: '',
      batch_number: '',
      dosage_and_frequency: '',
      dosage: '',
      frequency: '',
      route_of_administration: '',
      treatment_drug_group: '',
      start_date: '',
      end_date: '',
      indication: '',
      reaction_improved_after_stopping: 'no_information',
      reaction_reoccurred_after_rechallenge: 'no_information',
    }
    updateDrugs([...drugs, newDrug])
  }

  const removeDrug = (id: string) => {
    if (drugs.length > 1) {
      updateDrugs(drugs.filter(drug => drug.id !== id))
    }
  }

  const updateDrug = (id: string, updates: Partial<SuspectedDrug>) => {
    updateDrugs(drugs.map(drug => 
      drug.id === id ? { ...drug, ...updates } : drug
    ))
  }

  // Concurrent drugs functions
  const addConcurrentDrug = () => {
    const newDrug = createEmptyConcurrentDrug()
    updateConcurrentDrugs([...concurrentDrugs, newDrug])
  }

  const removeConcurrentDrug = (id: string) => {
    if (concurrentDrugs.length > 1) {
      updateConcurrentDrugs(concurrentDrugs.filter(drug => drug.id !== id))
    }
  }

  const updateConcurrentDrug = (id: string, updates: Partial<ConcurrentDrugFormData>) => {
    updateConcurrentDrugs(concurrentDrugs.map(drug => 
      drug.id === id ? { ...drug, ...updates } : drug
    ))
  }

  return (
    <div className="space-y-6">
      <div>
        <h3 className="text-lg font-semibold text-gray-900 mb-2">
          Ph·∫ßn C. Th√¥ng tin v·ªÅ thu·ªëc nghi ng·ªù g√¢y ADR
        </h3>
        <p className="text-sm text-gray-600">
          Li·ªát k√™ t·∫•t c·∫£ c√°c thu·ªëc c√≥ th·ªÉ g√¢y ra ph·∫£n ·ª©ng c√≥ h·∫°i
        </p>
      </div>

      <div className="space-y-6">
        {drugs.map((drug, index) => (
          <Card key={drug.id} className="relative">
            <div className="flex items-center justify-between mb-4">
              <h4 className="text-md font-medium text-gray-900">
                Thu·ªëc #{index + 1}
              </h4>
              {drugs.length > 1 && (
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => removeDrug(drug.id)}
                  className="text-red-600 hover:text-red-700 hover:border-red-300"
                >
                  <TrashIcon className="w-4 h-4 mr-1" />
                  X√≥a
                </Button>
              )}
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <Input
                label="T√™n thu·ªëc (t√™n g·ªëc)"
                value={drug.drug_name}
                onChange={(e) => updateDrug(drug.id, { drug_name: e.target.value })}
                placeholder="VD: Paracetamol"
                required
              />

              <Input
                label="T√™n th∆∞∆°ng m·∫°i"
                value={drug.commercial_name}
                onChange={(e) => updateDrug(drug.id, { commercial_name: e.target.value })}
                placeholder="VD: Panadol"
              />

              <Input
                label="D·∫°ng b√†o ch·∫ø, h√†m l∆∞·ª£ng"
                value={drug.dosage_form}
                onChange={(e) => updateDrug(drug.id, { dosage_form: e.target.value })}
                placeholder="VD: Vi√™n n√©n 500mg"
              />

              <Input
                label="Nh√† s·∫£n xu·∫•t"
                value={drug.manufacturer}
                onChange={(e) => updateDrug(drug.id, { manufacturer: e.target.value })}
                placeholder="VD: C√¥ng ty ABC, C√¥ng ty XYZ..."
              />

              <Input
                label="S·ªë l√¥"
                value={drug.batch_number}
                onChange={(e) => updateDrug(drug.id, { batch_number: e.target.value })}
                placeholder="VD: L123456, LOT2024001..."
              />

              <Input
                label="Li·ªÅu d√πng"
                value={drug.dosage}
                onChange={(e) => updateDrug(drug.id, { dosage: e.target.value })}
                placeholder="VD: 500mg, 1 vi√™n, 2 vi√™n..."
              />

              <Input
                label="S·ªë l·∫ßn d√πng"
                value={drug.frequency}
                onChange={(e) => updateDrug(drug.id, { frequency: e.target.value })}
                placeholder="VD: 3 l·∫ßn/ng√†y, 2 l·∫ßn/ng√†y, m·ªói 8 gi·ªù..."
              />

              <Input
                label="ƒê∆∞·ªùng d√πng"
                value={drug.route_of_administration}
                onChange={(e) => updateDrug(drug.id, { route_of_administration: e.target.value })}
                placeholder="VD: U·ªëng, ti√™m tƒ©nh m·∫°ch"
              />

              <div>
                <Select
                  label="Nh√≥m thu·ªëc ƒëi·ªÅu tr·ªã"
                  value={drug.treatment_drug_group || ''}
                  onChange={(e) => updateDrug(drug.id, { treatment_drug_group: e.target.value })}
                  options={[
                    { value: '', label: loadingTreatmentDrugs ? 'ƒêang t·∫£i...' : (treatmentDrugsError ? treatmentDrugsError : 'Ch·ªçn nh√≥m thu·ªëc ƒëi·ªÅu tr·ªã') },
                    ...treatmentDrugOptions
                  ]}
                  disabled={loadingTreatmentDrugs || !!treatmentDrugsError}
                />
                {treatmentDrugsError && (
                  <p className="mt-1 text-sm text-red-600">
                    {treatmentDrugsError}
                  </p>
                )}
                {!loadingTreatmentDrugs && !treatmentDrugsError && treatmentDrugs.length === 0 && (
                  <p className="mt-1 text-sm text-yellow-600">
                    Ch∆∞a c√≥ d·ªØ li·ªáu nh√≥m thu·ªëc. Vui l√≤ng ch·∫°y migration trong th∆∞ m·ª•c supabase/migrations
                  </p>
                )}
              </div>

              <Input
                label="Ng√†y b·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng"
                type="date"
                value={drug.start_date}
                onChange={(e) => updateDrug(drug.id, { start_date: e.target.value })}
              />

              <Input
                label="Ng√†y k·∫øt th√∫c s·ª≠ d·ª•ng"
                type="date"
                value={drug.end_date}
                onChange={(e) => updateDrug(drug.id, { end_date: e.target.value })}
              />

              <div className="md:col-span-2">
                <Textarea
                  label="L√Ω do d√πng thu·ªëc"
                  value={drug.indication}
                  onChange={(e) => updateDrug(drug.id, { indication: e.target.value })}
                  placeholder="M√¥ t·∫£ l√Ω do s·ª≠ d·ª•ng thu·ªëc n√†y..."
                  rows={2}
                />
              </div>

              <Select
                label="Sau khi ng·ª´ng/gi·∫£m li·ªÅu, ph·∫£n ·ª©ng c√≥ c·∫£i thi·ªán kh√¥ng?"
                value={drug.reaction_improved_after_stopping}
                onChange={(e) => updateDrug(drug.id, { 
                  reaction_improved_after_stopping: e.target.value as any 
                })}
                options={reactionOptions}
                required
              />

              <Select
                label="T√°i s·ª≠ d·ª•ng thu·ªëc c√≥ xu·∫•t hi·ªán l·∫°i ph·∫£n ·ª©ng kh√¥ng?"
                value={drug.reaction_reoccurred_after_rechallenge}
                onChange={(e) => updateDrug(drug.id, { 
                  reaction_reoccurred_after_rechallenge: e.target.value as any 
                })}
                options={rechallengeOptions}
                required
              />
            </div>
          </Card>
        ))}
      </div>

      <div className="flex justify-center">
        <Button
          variant="outline"
          onClick={addDrug}
          className="flex items-center"
        >
          <PlusIcon className="w-4 h-4 mr-2" />
          Th√™m thu·ªëc kh√°c
        </Button>
      </div>

      <div className="bg-green-50 p-4 rounded-lg">
        <p className="text-sm text-green-800">
          <strong>G·ª£i √Ω:</strong> H√£y li·ªát k√™ t·∫•t c·∫£ c√°c thu·ªëc m√† b·ªánh nh√¢n ƒë√£ s·ª≠ d·ª•ng trong kho·∫£ng th·ªùi gian 
          li√™n quan ƒë·∫øn ph·∫£n ·ª©ng c√≥ h·∫°i, k·ªÉ c·∫£ c√°c thu·ªëc c√≥ v·∫ª kh√¥ng li√™n quan.
        </p>
      </div>

      {/* Section 16: Concurrent Drugs */}
      <div className="border-t pt-6">
        <div className="mb-6">
          <h4 className="text-md font-semibold text-gray-900 mb-2">
            16. Thu·ªëc d√πng ƒë·ªìng th·ªùi
          </h4>
          <p className="text-sm text-gray-600">
            C√°c thu·ªëc kh√°c ƒë∆∞·ª£c s·ª≠ d·ª•ng c√πng th·ªùi gian v·ªõi thu·ªëc nghi ng·ªù
          </p>
        </div>

        <div className="space-y-4">
          {concurrentDrugs.length > 0 ? (
            concurrentDrugs.map((drug, index) => (
              <Card key={drug.id} className="relative">
                <div className="flex items-center justify-between mb-4">
                  <h5 className="text-sm font-medium text-gray-900">
                    Thu·ªëc ƒë·ªìng th·ªùi #{index + 1}
                  </h5>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => removeConcurrentDrug(drug.id)}
                    className="text-red-600 hover:text-red-700 hover:border-red-300"
                  >
                    <TrashIcon className="w-4 h-4 mr-1" />
                    X√≥a
                  </Button>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <Input
                    label={CONCURRENT_DRUG_LABELS.drug_name}
                    value={drug.drug_name}
                    onChange={(e) => updateConcurrentDrug(drug.id, { drug_name: e.target.value })}
                    placeholder="VD: Aspirin, Metformin..."
                    required
                  />

                  <Input
                    label={CONCURRENT_DRUG_LABELS.dosage_form_strength}
                    value={drug.dosage_form_strength}
                    onChange={(e) => updateConcurrentDrug(drug.id, { dosage_form_strength: e.target.value })}
                    placeholder="VD: Vi√™n n√©n 100mg, Vi√™n nang 500mg..."
                  />

                  <Input
                    label={CONCURRENT_DRUG_LABELS.start_date}
                    type="date"
                    value={drug.start_date}
                    onChange={(e) => updateConcurrentDrug(drug.id, { start_date: e.target.value })}
                  />

                  <Input
                    label={CONCURRENT_DRUG_LABELS.end_date}
                    type="date"
                    value={drug.end_date}
                    onChange={(e) => updateConcurrentDrug(drug.id, { end_date: e.target.value })}
                  />
                </div>
              </Card>
            ))
          ) : (
            <div className="text-center py-6 bg-gray-50 rounded-lg border-2 border-dashed border-gray-300">
              <p className="text-gray-500 mb-4">Ch∆∞a c√≥ thu·ªëc d√πng ƒë·ªìng th·ªùi n√†o ƒë∆∞·ª£c th√™m</p>
              <Button
                variant="outline"
                onClick={addConcurrentDrug}
                className="flex items-center mx-auto"
              >
                <PlusIcon className="w-4 h-4 mr-2" />
                Th√™m thu·ªëc ƒë·∫ßu ti√™n
              </Button>
            </div>
          )}
        </div>

        {concurrentDrugs.length > 0 && (
          <div className="flex justify-center mt-4">
            <Button
              variant="outline"
              onClick={addConcurrentDrug}
              className="flex items-center"
            >
              <PlusIcon className="w-4 h-4 mr-2" />
              Th√™m thu·ªëc kh√°c
            </Button>
          </div>
        )}

        <div className="bg-blue-50 p-4 rounded-lg mt-4">
          <p className="text-sm text-blue-800">
            <strong>L∆∞u √Ω:</strong> Thu·ªëc d√πng ƒë·ªìng th·ªùi l√† c√°c thu·ªëc ƒë∆∞·ª£c s·ª≠ d·ª•ng trong c√πng kho·∫£ng th·ªùi gian 
            v·ªõi thu·ªëc nghi ng·ªù g√¢y ADR, c√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn vi·ªác ƒë√°nh gi√° m·ªëi li√™n quan.
          </p>
        </div>
      </div>
    </div>
  )
}


